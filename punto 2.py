# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/171b2iftxYaVr5RS2caPWOHDe2ckaouGS
"""

# Punto 2 del lab
#creacion de la clase
class Node:
 
    def __init__(self, key=''):
        self.key = key
        self.left = None
        self.right = None
 
 
# Funcion para imprimir todos los nodos hoja del árbol 
def Hoja(node):
    if node is None:
        return
 
    if node.left is None and node.right is None:
        print(node.key, end=' ')
    else:
        Hoja(node.right)
        Hoja(node.left)
 
 
# Función para construir el arbol donde cada  hoja contiene una combinacion de palabras

def Tree(root, alfabeto, digitos, i):
 
    # Caso base: arbol vacio
    if root is None or i == len(digitos):
        return
 
    # comprueba si existe digitos[i+1] en la lista de digitos
    if i + 1 < len(digitos):
 
        # proceso actual y siguiente digito
        total = 10 * digitos[i] + digitos[i + 1]
 
        # si ambos digitos pueden formar un caracter valido,es decir, no se pasa de 26, cree el hijo izquierdo a partir de él
        if total <= 26:
            root.left = Node(root.key + alfabeto[total - 1])
 
        # construye la parte izquierda del arbol  con los digitos restantes
        Tree(root.left, alfabeto, digitos, i + 2)
 
    # procesa el digito actual y crea el hijo correcto a partir de el
    root.right = Node(root.key + alfabeto[digitos[i] - 1])
 
    # construye la parte de derecha del arbol con los digitos restantes
    Tree(root.right, alfabeto, digitos, i + 1)
 
 

#Crear todos los obejtos y variables que  necesitamos
alfabeto  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
digitos = [1, 2, 2, 1]
# crea una raiz vacia
root = Node()
 
# llamar la parte de construir el arbol
Tree(root, alfabeto, digitos, 0)
Hoja(root)